let swapOp = 0;

let t0 = new Date();

mergeSortExample();

let t1 = new Date();
console.log(t1.valueOf() - t0.valueOf());
console.log(swapOp)

//mergeSortRandom(100000);
function mergeSortExample() {
    let array = [47,205,261,301,631,276,670,617,49,89,985,217,637,458,899,906,408,113,594,468,783,610,257,316,699,802,206,205,83,492,202,22,389,762,631,754,540,697,107,144,152,10,466,451,468,360,798,864,751,66,115,597,560,458,951,524,928,757,757,288,535,358,853,164,963,878,365,720,559,336,288,881,630,204,362,279,913,656,882,835,990,164,185,148,885,966,562,794,50,367,981,571,112,581,128,856,137,287,224,324,446,642,471,548,508,372,237,936,377,8,791,161,236,218,92,248,54,848,540,215,933,891,55,174,389,914,858,664,804,171,274,513,531,280,357,220,423,842,278,222,311,251,620,793,71,446,884,933,905,718,622,977,426,61,419,310,692,271,841,305,579,367,84,902,326,322,455,305,376,844,622,20,408,879,178,220,590,660,505,867,53,73,763,712,438,663,718,926,962,111,638,982,996,929,913,535,300,319,1,990,145,959,366,886,8,783,827,778,10,565,877,611,79,874,391,43,751,950,467,443,572,722,709,502,37,888,12,743,517,233,197,562,66,588,668,277,681,432,146,476,182,996,786,262,594,293,633,791,97,261,356,543,100,421,313,462,370,614,922,414,900,246,576,304,401,769,522,494,344,710,994,33,756,522,836,805,316,469,662,817,890,160,49,697,119,48,955,706,37,891,887,122,505,91,46,512,129,505,814,610,270,483,103,126,831,775,807,88,634,684,950,755,841,559,378,876,369,611,92,764,646,507,805,957,304,12,311,746,10,119,655,211,186,610,777,472,295,142,280,887,454,570,155,446,484,524,966,395,323,824,193,593,942,838,489,377,951,271,929,595,150,181,105,951,37,802,938,706,440,535,6,445,767,401,136,543,249,538,316,965,484,631,121,811,777,897,462,24,492,754,617,817,833,221,110,751,765,264,10,786,903,713,134,860,762,90,973,623,430,364,832,1,473,357,806,573,451,857,173,869,133,400,439,741,705,87,763,548,301,167,15,7,797,379,557,432,720,514,803,592,69,451,191,855,311,455,872,503,901,723,348,181,881,295,46,392,779,398,216,665,587,577,240,323,305,410,527,34,148,90,638,344,639,824,240,484,811,777,670,710,32,626,794,37,975,658,135,951,870,714,660,278,195,452,753,830,171,380,885,184,931,672,78,807,656,556,652,743,235,39,513,851,551,123,377,78,700,849,836,426,94,658,152,321,806,273,711,625,236,104,58,508,390,920,748,848,305,153,865,904,728,933,387,399,398,293,265,939,354,291,132,999,549,335,393,598,28,854,453,288,156,497,727,575,25,895,548,248,299,927,476,98,887,403,677,20,269,780,793,277,896,558,283,550,401,403,798,431,940,297,15,279,910,498,443,754,772,947,753,77,502,346,972,773,329,269,485,954,278,937,312,373,574,255,685,705,198,303,158,998,925,676,403,308,986,304,750,315,179,563,244,422,710,269,67,50,532,622,11,156,550,828,466,923,562,670,501,30,297,284,394,533,16,712,898,266,398,425,749,718,382,655,544,296,257,988,13,897,403,290,670,246,836,200,401,144,846,361,158,927,392,297,551,456,191,555,970,924,635,370,798,696,616,719,565,359,346,183,439,405,467,61,942,192,721,400,822,574,961,644,983,144,291,113,259,592,728,868,243,718,587,99,242,822,210,230,10,215,283,905,167,938,388,420,293,367,72,72,895,549,950,602,155,130,207,5,133,960,765,459,728,924,798,405,916,681,883,472,156,932,561,368,616,84,371,28,203,537,521,445,232,140,831,766,376,314,915,279,275,585,27,221,188,519,81,646,598,19,747,55,49,433,205,359,631,77,115,542,710,272,818,42,20,550,697,586,984,935,281,143,203,598,81,800,336,324,903,822,728,889,757,559,832,305,984,194,688,956,781,748,102,289,914,609,443,207,929,428,772,608,648,30,258,890,53,62,546,718,391,569,559,567,3,671,176,130,844,302,881,154,589,164,295,748,510,469,447,561,353,747,861,372,663,307,634,364,827,493,924,325,25,930,234,430,62,645,604,435,802,105,874,560,656,141,38,131,592,972,195,275,109,496,593,833,372,572,481,990,921,773,491,798,675,515,592,657,891,766,217,288,319,116,231,217,130,642,421,750,251,40,438,339,949,771,282,257,78,892,145,51,961,483,560,584,416,714,702,523,473,132,40,982,118,362,206,520,724,709,621,92,712,161,156,862,532,993,785,350,619,763,357,235,797,243,490,533,780,486,529,136,582,549,196,601,505,488,788,271,51,590,796,176,906,584,471,981,333,245,104,1];
    //console.log("Ausgangsarray:" + array);
    array = mergeSort(array);
    //console.log("Sortiertes Array:" + array);
}


function mergeSort(array){
    swapOp += 1;
    let len = array.length;
    let middle = Math.floor(len / 2);
    if(len < 2){
        return array
    }
    let left = array.splice(0, middle);
    return merge(mergeSort(left),mergeSort(array));
}

function merge(leftArray, rightArray) {
    swapOp += 1;
    let arrayNew = [];
    //prÃ¼fen ob ein Array leer ist
    while(leftArray.length != 0 && rightArray.length != 0) { 
        if (rightArray[0] < leftArray[0]) {
            arrayNew.push(rightArray.shift()) //erstes Element aus left entfernen und in arrayNew schreiben
        } else {
            arrayNew.push(leftArray.shift())
        }
    }
    //alles zusammen fassen
    arrayNew = [].concat(arrayNew, leftArray, rightArray);
    return arrayNew;
}